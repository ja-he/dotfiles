#!/usr/bin/bash
set -uo pipefail

_init_with_submodules() {
  (
    set -x
    submodules="${1}"
    git clone "${main_repo}" "${zettelkasten_path}"
    cd "${zettelkasten_path}"
    for submodule_dir in ${submodules}; do
      (
        cd "${submodule_dir}"
        git submodule update --init .
        git checkout main
      )
    done
  )
}

_update_toplevel()
{
  (
    set -x
    cd "${zettelkasten_path}"
    git pull
    for submodule_dir in ${ZETTELKASTEN_KAESTEN}; do
      git add ${submodule_dir}
    done
    git commit -m "Update to submodule(s)"
    git push
  )
}

update_kasten()
{
  local category=${1}
  (
    set -x
    cd "${zettelkasten_path}/${category}"
    git pull
    git add .
    git commit -m "$day Update"
    git push
  )
}

edit_zettel()
{
  local kasten=${1}
  local zettel=${2}

  local zettel_dir
  case ${kasten} in
    # TODO: restructure private, remove this
    private)
      zettel_dir=${zettelkasten_path}/${kasten}/${day}
      ;;
    *)
      zettel_dir=${zettelkasten_path}/${kasten}
      # TODO: error if not found as dir in path, probably
      ;;
  esac

  mkdir -p ${zettel_dir}
  nvim ${zettel_dir}/${zettel}
}

nvim_fzf_cmd()
{
  local kasten=${1}
  local fzfcmd=${2}
  nvim -c ":cd ${zettelkasten_path}/${kasten}" -c "${fzfcmd}"
}

# _get_kaesten() {
#   (
#     cd "${zettelkasten_path}"
#     git submodule status | while read hash repo branch; do echo $repo ; done 
#   )
# }

# usage sketch:
# $ zet <subcommand> [<kasten>] [<note>]
# $ zet init
# $ zet update       [<kasten>]
# $ zet edit          <kasten>   <note>
# $ zet filesearch   [<kasten>]
# $ zet textsearch   [<kasten>]

main_repo='git@gitlab.informatik.uni-bremen.de:ja_he/zettelkasten.git'
default_path=${HOME}/zettelkasten
zettelkasten_path=${ZETTELKASTENPATH:-${default_path}}
zettelkasten_path="$(readlink -m ${zettelkasten_path})"
zettelkasten_kaesten="${ZETTELKASTEN_KAESTEN:-"namib private"}"
day=`date '+%Y-%m-%d'`

command=${1}

case ${command} in
  init)
    _init_with_submodules "${zettelkasten_kaesten}"
    ;;
  new-kasten)
    # TODO: warn and ask for [y/n] confirmation before executing
    kasten_arg="${2}" # TODO: sanitize for no spaces etc?
    assumed_remote_url="git@gitlab.informatik.uni-bremen.de:ja_he/zettelkasten-${kasten_arg}"
    cd /tmp
    mkdir "zettelkasten-${kasten_arg}"
    git init -b main
    echo "# ${kasten_arg}" > README.md
    git add README.md
    git commit -m "initial commit"
    git push --set-upstream "${assumed_remote_url}" main 
    cd "${zettelkasten_path}"
    git pull
    git submodule add -b main "${assumed_remote_url}" "${kasten_arg}"
    git commit -m "add kasten '${kasten_arg}'"
    git push
    echo ""
    echo "---"
    echo "REMINDER: "
    echo "  don't forget to add this kasten to your '.bashrc' or similar"
    echo "---"
    ;;
  update)
    kasten_arg="${2:-""}"
    if [ -n "${kasten_arg}" ]; then
      # update specified kasten
      update_kasten "${kasten_arg}"
    else
      # update all kaesten
      for kasten in ${zettelkasten_kaesten}; do
        update_kasten "${kasten}"
      done
    fi
    _update_toplevel
    exit 0
    ;;
  edit)
    edit_zettel ${2} ${3}
    ;;
  add-image)
    kasten="${2}"
    img_src_path="${3}"
    name="${4}"
    source="${5}"
    comment="${6}"

    src_ext=${3#*.}
    dest_ext=${name#*.}
    if [ $src_ext != $dest_ext ]; then
      echo "source extension ($src_ext) does not match destination extension ($dest_ext), aborting..."
      exit 1
    fi

    img_dest_path="${zettelkasten_path}/${kasten}/${name}"
    cp "${img_src_path}" "${img_dest_path}"
    exiv2 -c "${source}|${comment}" "${img_dest_path}"

    echo "added image at '${img_dest_path}' with the following metadata:"
    exiv2 -pc "${img_dest_path}" | (
      IFS='|' read src comment;
      echo "  source:  '${src}'";
      echo "  comment: '${comment}'"
    )
    ;;
  preview)
    filepath="${2}"
    extension="${filepath#*.}"
    case "${extension}" in
      png | jpg | jpeg)
        catimg -w "$(( $(tput cols) - 4))" "${filepath}"
        ;;
      txt | md)
        bat "${filepath}"
        ;;
      *)
        echo "[extension ${extension} unknown, ignoring...]"
        ;;
    esac
    ;;
  filesearch)
    nvim \
      -c ":cd ${zettelkasten_path}/${2:-""}" \
      -c ':Files'
    ;;
  textsearch)
    nvim \
      -c ":cd ${zettelkasten_path}/${2:-""}" \
      -c ':Ag'
    ;;
  *)
    echo "ERROR: unrecognized command '${command}'"
    exit 1
esac
